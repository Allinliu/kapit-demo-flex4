<?xml version="1.0" encoding="utf-8"?>
<components:TemplateDemoContainer
	xmlns:fx="http://ns.adobe.com/mxml/2009" 
	xmlns:s="library://ns.adobe.com/flex/spark" 
	xmlns:common="fr.kapit.lab.demo.common.*"
	xmlns:mx="library://ns.adobe.com/flex/mx"
	xmlns:components="fr.kapit.lab.demo.common.components.*"
	xmlns:ringchart="fr.kapit.ringchart.*"
	title="Ring Chart Demo"
	openOptions="true"
	creationComplete="this_creationCompleteHandler(event)"
	>
	
	<fx:Declarations>
		<s:ArrayList id="colorPolicyCollection">
			<fx:Object label="Monochromatic" value="{RingChart.COLOR_POLICY_MONOCHROMATIC}" />
			<fx:Object label="Bichromatic" value="{RingChart.COLOR_POLICY_BICHROMATIC}" />
			<fx:Object label="Spectrum" value="{RingChart.COLOR_POLICY_SPECTRUM}" />
		</s:ArrayList>
	</fx:Declarations>
	
	<fx:Script>
	<![CDATA[
		import fr.kapit.lab.demo.ringchart.components.tooltips.CustomToolTip;
		import fr.kapit.ringchart.events.RingEvent;
		import fr.kapit.ringchart.ui.RingSeries;
		import fr.kapit.ringchart.ui.RingWedge;
		
		import mx.collections.ArrayCollection;
		import mx.events.FlexEvent;
		
		import spark.events.ListEvent;
		
		//--------------------------------------
		//  Datas
		//--------------------------------------
		
		[Embed(source="/fr/kapit/lab/demo/ringchart/assets/xml/CAC40.xml", mimeType="application/octet-stream")]
		private var cac40XMLClass:Class;
		
		
		//--------------------------------------
		//  Properties
		//--------------------------------------
		
		[Bindable] private var _cac40XML:XML = null;
		
		private var _year05:Object;
		private var _year06:Object;
		private var _year07:Object;
		
		
		protected function this_creationCompleteHandler(event:FlexEvent):void
		{
			removeEventListener(FlexEvent.CREATION_COMPLETE, this_creationCompleteHandler);
			initializeRingChart();
		}
		
		private function initializeRingChart():void
		{
			var ba:ByteArray = new cac40XMLClass() as ByteArray;
			_cac40XML = new XML(ba.readUTFBytes(ba.length));
			ba = null;
			
			_year05 = {};
			_year06 = {};
			_year07 = {};
			
			var dataXMLList:XMLList=_cac40XML.elements();
			for each (var item:XML in dataXMLList)
			{
				_year05[String(item.@name)]=Number(item.@year05);
				_year06[String(item.@name)]=Number(item.@year06);
				_year07[String(item.@name)]=Number(item.@year07);
			}
			
			refreshDataProvider();
			
			invalidateProperties();
		}
		
		override protected function commitProperties():void
		{
			super.commitProperties();
			
			ringChart.colorPolicy = colorPolicyDropDL.selectedItem.value;
			ringChart.firstColor = firstColorCP.selectedColor;
			ringChart.lastColor = secondColorCP.selectedColor;
			
			ringChart.invalidateProperties();
			ringChart.validateProperties();
			ringChart.validateDisplayList();
			
			var items:ArrayCollection = new ArrayCollection;
			if (ringChart.rings && ringChart.rings.length > 0)
			{
				var years:Array = getSelectedYears();
				var ring:RingSeries;
				for each (ring in ringChart.rings)
					ring.label = years.shift();
				
				ring = ringChart.rings[0] as RingSeries;
				var wedge:RingWedge;
				for each (wedge in ring.wedges)
					items.addItem({name: wedge.wedgeName, color: wedge.color});
			}
			legend.dataProvider = items;
			legend.selectedItems = Vector.<Object>(items.toArray());
		}
		
		protected function refreshDataProvider():void
		{
			var ringChartDataProvider:ArrayCollection = new ArrayCollection;
			
			if (year2005CheckBox.selected)
				ringChartDataProvider.addItem(_year05);
			if (year2006CheckBox.selected)
				ringChartDataProvider.addItem(_year06);
			if (year2007CheckBox.selected)
				ringChartDataProvider.addItem(_year07);
			
			ringChart.dataProvider = ringChartDataProvider;
		}
		
		private function getSelectedYears():Array
		{
			var result:Array = [];
			
			if (year2005CheckBox.selected)
				result.push(year2005CheckBox.label);
			if (year2006CheckBox.selected)
				result.push(year2006CheckBox.label);
			if (year2007CheckBox.selected)
				result.push(year2007CheckBox.label);
			
			return result;
		}
		
		protected function legendCheckBox_clickHandler(event:MouseEvent):void
		{
			refreshDataProvider();
		}
		
		protected function valueParseFunction(value:String):Number
		{
			return int(value);
		}
		
		protected function legend_itemRollOverHandler(event:ListEvent):void
		{
			ringChart.selectedWedge = event.item.name;
			legend.selectedItems = Vector.<Object>([event.item]);
		}
		
		protected function legend_itemRollOutHandler(event:ListEvent):void
		{
			ringChart.selectedWedge = null;
			legend.selectedItems = Vector.<Object>(legend.dataProvider.toArray());
		}
		
		protected function updateSteppersMaxValues():void
		{
			const MAX_FOR_INNER_0_OUTER_200:int = 20;
			const MAX_FOR_INNER_0_OUTER_450:int = 70;
			const MAX_FOR_INNER_50_OUTER_200:int = 5;
			const MAX_FOR_INNER_50_OUTER_450:int = 50;
			
			var maxForInner0:Number = ((sliderExternRadius.value - sliderExternRadius.minimum) /
				((sliderExternRadius.maximum - sliderExternRadius.minimum) / (MAX_FOR_INNER_0_OUTER_450 - MAX_FOR_INNER_0_OUTER_200)))
				+ MAX_FOR_INNER_0_OUTER_200;
			
			var maxForInner50:Number = ((sliderExternRadius.value - sliderExternRadius.minimum) /
				((sliderExternRadius.maximum - sliderExternRadius.minimum) / (MAX_FOR_INNER_50_OUTER_450 - MAX_FOR_INNER_50_OUTER_200)))
				+ MAX_FOR_INNER_50_OUTER_200;
			
			var maxDistanceBetweenRings:int = ((maxForInner0 - maxForInner50) *
				((sliderCenterRadius.maximum - sliderCenterRadius.value) / (sliderCenterRadius.maximum - sliderCenterRadius.minimum))) + maxForInner50;
			
			stepperDistanceRings.maximum = maxDistanceBetweenRings;
			stepperDistanceRings.value = int(Math.min(maxDistanceBetweenRings, stepperDistanceRings.value));
			
			stepperDistanceWedges.maximum = int((maxDistanceBetweenRings - stepperDistanceRings.value) / 2);
			stepperDistanceWedges.value = int(Math.min(stepperDistanceWedges.maximum, stepperDistanceWedges.value));
		}
		
		private function thc(event:RingEvent):void
		{
			if (!(event.item is RingWedge))
				return;
			
			if (ringChart.customToolTipClass.hasOwnProperty("year"))
				ringChart.customToolTipClass["year"] = (event.item as RingWedge).serie.label;
		}
	]]>
	</fx:Script>
	
	<components:optionsContent>
<!--
		RINGS PARAMETERS :
-->
		<components:OptionsPanel title="Rings" width="100%">
			<!-- Color policy -->
			<s:HGroup gap="9">
				<components:OptionElement title="Color policy:" paddingRight="0">
					<s:DropDownList id="colorPolicyDropDL" width="105"
									buttonMode="true" requireSelection="true" selectedIndex="2"
									dataProvider="{colorPolicyCollection}"
									change="invalidateProperties()"
									/>
				</components:OptionElement>
				<s:VGroup gap="4" visible="{2 > colorPolicyDropDL.selectedIndex}">
					<s:Label text="First:" fontFamily="Calibri" />
					<components:ColorPicker id="firstColorCP"
											selectedColor="0xFCE406"
											buttonMode="true"
											change="invalidateProperties()"
											/>
				</s:VGroup>
				<s:VGroup gap="4" visible="{colorPolicyDropDL.selectedIndex == 1}">
					<s:Label text="Second:" fontFamily="Calibri" />
					<components:ColorPicker id="secondColorCP"
											selectedColor="0x990000"
											buttonMode="true"
											change="invalidateProperties()"
											/>
				</s:VGroup>
			</s:HGroup>
			<common:HRule />
			<!-- Inner radius -->
			<components:OptionElement title="Center radius:">
				<components:HRangeSlider id="sliderCenterRadius"
						   minimum="0" maximum="50" value="10" stepSize="1"
						   width="190" tickNumber="11"
						   skinClass="fr.kapit.lab.demo.common.skins.HSliderSkin"
						   change="updateSteppersMaxValues()"
						   />
			</components:OptionElement>
			<!-- Outer radius -->
			<components:OptionElement title="Extern radius:">
				<components:HRangeSlider id="sliderExternRadius"
						   minimum="250" maximum="500" value="400" stepSize="1"
						   width="190" tickNumber="11"
						   skinClass="fr.kapit.lab.demo.common.skins.HSliderSkin"
						   change="updateSteppersMaxValues()"
						   />
			</components:OptionElement>
			<!-- Distance between rings -->
			<components:OptionElement title="Distance between rings:">
				<s:NumericStepper id="stepperDistanceRings"
						   minimum="0" maximum="50" value="5" stepSize="1"
						   width="50"
						   snapInterval="1" valueParseFunction="valueParseFunction"
						   change="updateSteppersMaxValues()"
						   />
			</components:OptionElement>
			<common:HRule />
			<!-- Distance between wedges -->
			<components:OptionElement title="Distance between wedges:">
				<s:NumericStepper id="stepperDistanceWedges"
								  minimum="0" maximum="50" value="0" stepSize="1"
								  width="50"
								  snapInterval="1" valueParseFunction="valueParseFunction"
								  />
			</components:OptionElement>
			<!-- Wedge move -->
			<s:Group>
				<s:CheckBox id="wedgeMoveCheckBox" left="9"
							label="Selected wedge move"
							selected="true" buttonMode="true"
							/>
			</s:Group>
			<components:OptionElement title="Distance:" enabled="{wedgeMoveCheckBox.selected}">
				<s:NumericStepper id="stepperWedgeMove"
								  minimum="10" maximum="50" value="10" stepSize="1"
								  width="50"
								  snapInterval="1" valueParseFunction="valueParseFunction"
								  />
			</components:OptionElement>
		</components:OptionsPanel>
<!--
		DATA PARAMETERS :
-->
		<components:OptionsPanel title="Data" width="100%">
			<s:VGroup paddingLeft="9" gap="11">
				<!-- Display labels -->
				<s:CheckBox id="displayLabelsCheckBox"
							label="Display labels"
							selected="true" buttonMode="true"
							/>
				<!-- Display percentages -->
				<s:CheckBox id="displayPercentagesCheckBox"
							label="Display percentages"
							buttonMode="true"
							/>
				<!-- Display labels -->
				<s:CheckBox id="displayTooltipsCheckBox"
							label="Display tooltips"
							selected="true" buttonMode="true"
							/>
			</s:VGroup>
		</components:OptionsPanel>
<!--
		TOOLS PARAMETERS :
-->
		<components:OptionsPanel title="Tools" width="100%">
			<s:VGroup paddingLeft="9" gap="11">
				<!-- Display Legend -->
				<s:CheckBox id="displayLegendCheckBox"
							label="Display legend"
							selected="true" buttonMode="true"
							/>
			</s:VGroup>
		</components:OptionsPanel>
	</components:optionsContent>
	
	<s:Rect top="0" left="0" right="0" bottom="0">
		<s:fill>
			<s:SolidColor color="0xF5F5F5" />
		</s:fill>
	</s:Rect>

	<s:HGroup gap="5" top="10" left="10" right="10" bottom="10">
		<ringchart:RingChart id="ringChart"
							 width="100%" height="100%"
							 customToolTipClass="{CustomToolTip}"
							 gapBetweenRings="{stepperDistanceRings.value}"
							 gapBetweenWedges="{stepperDistanceWedges.value}"
							 innerRadius="{sliderCenterRadius.value}"
							 itemRollOver="thc(event)"
							 radialDisplacement="{wedgeMoveCheckBox.selected ? stepperWedgeMove.value : 0}"
							 radius="{sliderExternRadius.value}"
							 seriesFilter="{null}"
							 viewLabel="{displayLabelsCheckBox.selected}"
							 viewPercentage="{displayPercentagesCheckBox.selected}"
							 viewTooltips="{displayTooltipsCheckBox.selected}"
							 />
		
		<s:VGroup visible="{displayLegendCheckBox.selected}"
				  width="135" height="100%">
			<s:List id="legend" itemRenderer="fr.kapit.lab.demo.ringchart.components.renderers.LegendItemRenderer"
					itemRollOver="legend_itemRollOverHandler(event)"
					itemRollOut="legend_itemRollOutHandler(event)"
					allowMultipleSelection="true"
					borderVisible="false" contentBackgroundAlpha="0">
				<s:layout>
					<s:VerticalLayout gap="0" />
				</s:layout>
			</s:List>
			<common:HRule />
			<s:CheckBox id="year2005CheckBox" label="2005" click="legendCheckBox_clickHandler(event)"
						selected="true" buttonMode="true" fontSize="14" color="#4F4F4F" />
			<s:CheckBox id="year2006CheckBox" label="2006" click="legendCheckBox_clickHandler(event)"
						selected="true" buttonMode="true" fontSize="14" color="#4F4F4F" />
			<s:CheckBox id="year2007CheckBox" label="2007" click="legendCheckBox_clickHandler(event)"
						selected="true" buttonMode="true" fontSize="14" color="#4F4F4F" />
		</s:VGroup>
	</s:HGroup>

</components:TemplateDemoContainer>